#######################################################
#
# Test adding a package that doesn't exist
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "nonexistant" string => "nonexistantpackagename";
}

#######################################################

bundle agent test
{

  methods:
    "ph" usebundle => package_install("${init.nonexistant}");

}

#######################################################

bundle agent check
{
  classes:
      "ok" expression => "package_install_${init.nonexistant}_not_ok.package_install_${init.nonexistant}_reached.!package_install_${init.nonexistant}_ok.!package_install_${init.nonexistant}_kept";
      redhat::
        "ok" expression => "any";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
