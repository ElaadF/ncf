#######################################################
#
# Test checking if a key-value pair are present in a file 
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);
    "file1"       string => "${tmp}/test1";
    "ref_file1"   string => "${tmp}/ref1";
    "file_canon1" string => canonify("${file1}");

    "file2"       string => "${tmp}/test2";
    "ref_file2"   string => "${tmp}/ref2";
    "file_canon2" string => canonify("${file2}");

    "file3"       string => "${tmp}/test3";
    "ref_file3"   string => "${tmp}/ref3";
    "file_canon3" string => canonify("${file3}");

    "file4"       string => "${tmp}/test4";
    "ref_file4"   string => "${tmp}/ref4";
    "file_canon4" string => canonify("${file4}");

    "file5"       string => "${tmp}/test5";
    "ref_file5"   string => "${tmp}/ref5";
    "file_canon5" string => canonify("${file5}");

    "file6"       string => "${tmp}/test6";
    "ref_file6"   string => "${tmp}/ref6";
    "file_canon6" string => canonify("${file6}");

    "file7"       string => "${tmp}/test7";
    "ref_file7"   string => "${tmp}/ref7";
    "file_canon7" string => canonify("${file7}");

# First test: ensure that a value is correctly modified
    "base_text1"  string => "# File with lhs=rhs text
JAVA_OPTS =\"-Djava.awt.headless=true -Xmx128m -XX:+UseConcMarkSweepGC\"";

    "ref_text1"   string=> "# File with lhs=rhs text
JAVA_OPTS =\\\"-Djava.awt.headless=true -Xmx1024m\\\"";

    "key1"        string => "JAVA_OPTS";
    "value1"      string => "\"-Djava.awt.headless=true -Xmx1024m\"";
    "separator1"  string => "=";
    "option1"     string => "lax";

# Second test: ensure that a key-value is correctly added in a file
    "base_text2"  string => "# File with lhs=rhs text
Key=Value";

    "ref_text2"   string=> "# File with lhs=rhs text
Key=Value
AddedKey=AddedValue";

    "key2"        string => "AddedKey";
    "value2"      string => "AddedValue";
    "separator2"  string => "=";
    "option2"     string => "lax";

# Third test: ensure that if key-value is already correct (with extra spaces), nothing is done
    "base_text3"  string => "# File with lhs rhs text
Key   Value";

    "ref_text3"   string => "# File with lhs rhs text
Key   Value";

    "key3"        string => "Key";
    "value3"      string => "Value";
    "separator3"  string => " ";
    "option3"     string => "lax";

# Fourth test: ensure that if key-value is already correct (with extra spaces), nothing is done
    "base_text4"  string => "# File with lhs rhs text
Key =	Value";

    "ref_text4"   string => "# File with lhs rhs text
Key =	Value";

    "key4"        string => "Key";
    "value4"      string => "Value";
    "separator4"  string => "=";
    "option4"     string => "lax";

# Fifth test: ensure that if key-value is already there with extra spaces, extra space are purged
    "base_text5"  string => "# File with lhs rhs text
Key =	Value";

    "ref_text5"   string => "# File with lhs rhs text
Key=Value";

    "key5"        string => "Key";
    "value5"      string => "Value";
    "separator5"  string => "=";
    "option5"     string => "strict";

# Sixth test: ensure that a key-value is correctly added in a file
    "base_text6"  string => "# File with lhs=rhs text
Foo=bar
Key=Value";

    "ref_text6"   string=> "# File with lhs=rhs text
Foo=bar
Key=Value
AddedKey=AddedValue";

    "key6"        string => "AddedKey";
    "value6"      string => "AddedValue";
    "separator6"  string => "=";
    "option6"     string => "strict";


# Seventh test: ensure that a value is correctly modified
    "base_text7"  string => "# File with lhs=rhs text
JAVA_OPTS =\"-Djava.awt.headless=true -Xmx128m -XX:+UseConcMarkSweepGC\"";

    "ref_text7"   string=> "# File with lhs=rhs text
JAVA_OPTS=\\\"-Djava.awt.headless=true -Xmx1024m\\\"";

    "key7"        string => "JAVA_OPTS";
    "value7"      string => "\"-Djava.awt.headless=true -Xmx1024m\"";
    "separator7"  string => "=";
    "option7"     string => "strict";


  commands:
# Initialize test and reference files
      "/bin/echo"
        args    => "\"${ref_text1}\" > \"${ref_file1}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text1}\" > \"${file1}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${ref_text2}\" > \"${ref_file2}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text2}\" > \"${file2}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${ref_text3}\" > \"${ref_file3}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text3}\" > \"${file3}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${ref_text4}\" > \"${ref_file4}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text4}\" > \"${file4}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${ref_text5}\" > \"${ref_file5}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text5}\" > \"${file5}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${ref_text6}\" > \"${ref_file6}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text6}\" > \"${file6}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${ref_text7}\" > \"${ref_file7}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text7}\" > \"${file7}\"",
        contain => in_shell;
}

#######################################################

bundle agent test
{
  methods:
    "modified key" usebundle => file_key_value_present_option("${init.file1}", "${init.key1}", "${init.value1}", "${init.separator1}", "${init.option1}");
    "added key"    usebundle => file_key_value_present_option("${init.file2}", "${init.key2}", "${init.value2}", "${init.separator2}", "${init.option2}");
    "success key"  usebundle => file_key_value_present_option("${init.file3}", "${init.key3}", "${init.value3}", "${init.separator3}", "${init.option3}");
    "success key"  usebundle => file_key_value_present_option("${init.file4}", "${init.key4}", "${init.value4}", "${init.separator4}", "${init.option4}");
    "repaired key" usebundle => file_key_value_present_option("${init.file5}", "${init.key5}", "${init.value5}", "${init.separator5}", "${init.option5}");
    "repaired key" usebundle => file_key_value_present_option("${init.file6}", "${init.key6}", "${init.value6}", "${init.separator6}", "${init.option6}");
    "repaired key" usebundle => file_key_value_present_option("${init.file7}", "${init.key7}", "${init.value7}", "${init.separator7}", "${init.option7}");
}

#######################################################

bundle agent check
{
  vars:
      "file_diff_test1" string => "/usr/bin/diff \"${init.ref_file1}\" \"${init.file1}\"";
      "file_diff_test2" string => "/usr/bin/diff \"${init.ref_file2}\" \"${init.file2}\"";
      "file_diff_test3" string => "/usr/bin/diff \"${init.ref_file3}\" \"${init.file3}\"";
      "file_diff_test4" string => "/usr/bin/diff \"${init.ref_file4}\" \"${init.file4}\"";
      "file_diff_test5" string => "/usr/bin/diff \"${init.ref_file5}\" \"${init.file5}\"";
      "file_diff_test6" string => "/usr/bin/diff \"${init.ref_file6}\" \"${init.file6}\"";
      "file_diff_test7" string => "/usr/bin/diff \"${init.ref_file7}\" \"${init.file7}\"";

  classes:
    "file1_correct" 
       expression => returnszero("${file_diff_test1}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon1}_reached");
    "file2_correct"
       expression => returnszero("${file_diff_test2}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon2}_reached");
    "file3_correct"
       expression => returnszero("${file_diff_test3}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon3}_reached");
    "file4_correct"
       expression => returnszero("${file_diff_test4}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon4}_reached");
    "file5_correct"
       expression => returnszero("${file_diff_test4}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon4}_reached");
    "file6_correct"
       expression => returnszero("${file_diff_test4}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon4}_reached");
    "file7_correct"
       expression => returnszero("${file_diff_test4}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon4}_reached");

    "ok_test1"     expression => "file1_correct.file_key_value_present_${init.file_canon1}_repaired.!file_key_value_present_${init.file_canon1}_not_ok";
    "ok_test2"     expression => "file2_correct.file_key_value_present_${init.file_canon2}_repaired.!file_key_value_present_${init.file_canon2}_not_ok";
    "ok_test3"     expression => "file3_correct.file_key_value_present_${init.file_canon3}_kept.!file_key_value_present_${init.file_canon3}_not_ok.!file_key_value_present_${init.file_canon3}_repaired";
    "ok_test4"     expression => "file4_correct.file_key_value_present_${init.file_canon4}_kept.!file_key_value_present_${init.file_canon4}_not_ok.!file_key_value_present_${init.file_canon4}_repaired";
    "ok_test5"     expression => "file5_correct.file_key_value_present_${init.file_canon5}_repaired.!file_key_value_present_${init.file_canon5}_not_ok";
    "ok_test6"     expression => "file6_correct.file_key_value_present_${init.file_canon6}_repaired.!file_key_value_present_${init.file_canon6}_not_ok";
    "ok_test7"     expression => "file7_correct.file_key_value_present_${init.file_canon7}_repaired.!file_key_value_present_${init.file_canon7}_not_ok";
    "ok"          and => {"ok_test1","ok_test2","ok_test3", "ok_test4", "ok_test5", "ok_test6", "ok_test7"};


  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !file1_correct::
      "diff command doesn't returns 0 for file 1 (command: ${file_diff_test1})";
    !file2_correct::
      "diff command doesn't returns 0 for file 2 (command: ${file_diff_test2})";
    !file3_correct::
      "diff command doesn't returns 0 for file 3 (command: ${file_diff_test3})";
    !file4_correct::
      "diff command doesn't returns 0 for file 4 (command: ${file_diff_test4})";
    !file5_correct::
      "diff command doesn't returns 0 for file 5 (command: ${file_diff_test5})";
    !file6_correct::
      "diff command doesn't returns 0 for file 6 (command: ${file_diff_test6})";
    !file7_correct::
      "diff command doesn't returns 0 for file 7 (command: ${file_diff_test7})";
    file1_correct.!ok_test1::
      "Generic method return is invalid for first test (expected repaired)";
    file2_correct.!ok_test3::
      "Generic method return is invalid for second test (expected repaired)";
    file3_correct.!ok_test3::
      "Generic method return is invalid for third test (expected kept)";
    file4_correct.!ok_test4::
      "Generic method return is invalid for fourth test (expected kept)";
    file5_correct.!ok_test5::
      "Generic method return is invalid for second test (expected repaired)";
    file6_correct.!ok_test6::
      "Generic method return is invalid for second test (expected repaired)";
    file7_correct.!ok_test7::
      "Generic method return is invalid for second test (expected repaired)";
}
