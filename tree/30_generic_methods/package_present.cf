#####################################################################################
# Copyright 2016 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Package present
# @agent_version >=3.7
# @description Enforce the presence of a package
# @documentation See [package_state](#package_state) for documentation.
# @parameter            name Name of the package, or path to a local package
# @parameter            version Version of the package, can be "latest" for latest version or "any" for any version (defaults to "any")
# @parameter_constraint version "allow_empty_string" : true
# @parameter            architecture Architecture of the package, can be an architecture name  or "default" (defaults to "default")
# @parameter_constraint architecture "allow_empty_string" : true
# @parameter            provider Package provider to use, can be "yum", "apt", "zypper", "zypper_pattern", "slackpkg", "pkg" or "default" for system default package manager (defaults to "default")
# @parameter_constraint provider "allow_empty_string" : true
# @parameter_constraint provider "select" : [ "", "default", "yum", "apt", "zypper", "zypper_pattern", "slackpkg", "pkg" ]
# 
# @class_prefix package_present
# @class_parameter name

bundle agent package_present(name, version, architecture, provider)
{
  vars:

      "canonified_name"           string => canonify("${name}");

      "old_class_prefix"          string => "package_present_${canonified_name}";
      "promisers"                 slist  => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"              string => canonify(join("_", "promisers"));
      "args"                      slist  => { "${name}", "${state}" };

  methods:

      "action"                 usebundle => ncf_package("${name}", "${version}", "${architecture}", "${provider}", "present", "");

      "class copy"             usebundle => _classes_copy("ncf_package_present_${canonified_name}", "${old_class_prefix}"),
                              ifvarclass => "ncf_package_present_${canonified_name}_reached";
      "new result classes"     usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                              ifvarclass => "${class_prefix}_action_reached";

      "report"                 usebundle => _log("${ncf_package.message}", "${old_class_prefix}", "${class_prefix}", @{args}),
                              ifvarclass => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached)";
}
