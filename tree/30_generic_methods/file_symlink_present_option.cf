#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Symlink present (optional overwriting)
# @description Create a symlink at a destination path and pointing to a source target. This is also possible to enforce its creation
#
# @parameter source      Source file (absolute path on the target node)
# @parameter destination Destination file (absolute path on the target node)
# @parameter enforce     Force symlink if file already exist (true or false)
# 
# @class_prefix file_symlink_present
# @class_parameter destination

bundle agent file_symlink_present_option(source, destination, enforce)
{
  vars:
      "old_class_prefix" string => canonify("file_symlink_present_${destination}");
      "args"              slist => { "${source}", "${destination}", "${enforce}" };
      "report_param"      string => join("_", args);
      "class_prefix"      string => canonify("${old_class_prefix}_${report_param}");

  files:
   # Symlink
      "${destination}"
                    link_from         => ln_s("${source}"),
                    move_obstructions => "${enforce}",
                    classes           => classes_generic_two("${old_class_prefix}", "${class_prefix}"),
                    comment           => "Create the ${destination} symlink pointing to ${source}";

  methods:
      "report" usebundle => _log("Symlink ${destination} targeting ${source}", "${old_class_prefix}", "${class_prefix}", @{args});
}
