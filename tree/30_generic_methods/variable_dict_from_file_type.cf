#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable dict from file type
# @description Define a variable that contains key,value pairs (a dictionnary) from a JSON, CSV or YAML file
# @documentation To use the generated variable, you must use the form `${variable_prefix.variable_name[key]}` with each name replaced with the parameters of this method.
# 
# Be careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). 
#
# 
#

# @parameter variable_prefix The prefix of the variable name
# @parameter variable_name   The variable to define, the full name will be variable_prefix.variable_name
# @parameter file_name       The file name with to load data from
# @parameter file_type       The file type, can be "JSON", "CSV", "YAML" or "auto" for autodection based on file extension, with a fallback to JSON (default is "auto")
# @parameter_constraint file_type "allow_empty_string" : true
# @parameter_constraint file_type "select" : [ "", "auto", "JSON", "YAML", "CSV" ]
# 
# @class_prefix variable_dict_from_file_type
# @class_parameter variable_name

bundle agent variable_dict_from_file_type(variable_prefix, variable_name, file_name, file_type)
{
  vars:
      "old_class_prefix"  string => canonify("variable_dict_from_file_type_${variable_name}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"               slist => { "${variable_prefix}", "${variable_name}", "${file_name}", "${file_type}" };

      # define the variable within the variable_prefix namespace
      "${variable_prefix}.${variable_name}"  data => readdata("${file_name}", "${file_type}");

  defaults:
      "file_type"         string => "auto", if_match_regex => "";

  classes:
     "variable_defined" expression => isvariable("${variable_prefix}.${variable_name}");

  methods:
    !variable_defined::
      "error"    usebundle => _classes_failure("${old_class_prefix}");
      "error"    usebundle => _classes_failure("${class_prefix}");

    variable_defined::
      "success"  usebundle => _classes_success("${old_class_prefix}");
      "success"  usebundle => _classes_success("${class_prefix}");

    any::
      "report"
        usebundle  => _log("Set the dict ${variable_prefix}.${variable_name} to the content of ${file_name} (${file_type} format)", "${old_class_prefix}", "${class_prefix}", @{args});
}
