#####################################################################################
# Copyright 2013-2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Log
# @description Standard logging output
#
# @parameter message              The common part of the message to display
# @parameter old_class_prefix     The prefix of the class for different states (0.x version)
# @parameter origin_class_prefix  The prefix of the class for different states (1.x version)
# @parameter args                 The arguments used to call the generic method (slist)
#
# The args parameter is used:
# * to be able to make reports when calling the same method with the same class parameter several times
# * to be able to display detailed reports
#
# The origin_class_prefix is used in priority, with a fallback on the old_class_prefix if empty.
#
# @class_prefix
# @class_parameter old_class_prefix

bundle agent _log(message, old_class_prefix, origin_class_prefix, args)
{
  vars:
    # We need to detect if args is an iterator or a scalar
    !pass1::
      "length_list" int => length("args");

    pass2::
      # we need to reset the value to 0, otherwise in the next call of this generic method, the previous
      # value will be reused if args is a scalar
      "length_list" int => "0";

    islist::
      "sanitized_args" string => join(", ", "args");
    pass2.!islist::
      "sanitized_args" string => "${args}";

  classes:
    !pass2::
      "islist" expression => isgreaterthan("$(length_list)", "1");

    "pass2" expression => "pass1";
    "pass1" expression => "any";

  methods:
    pass2::
      # Report using the appropriate bundle(s)
      "wrapper for ${configuration.enabled_loggers}"
        usebundle => ${configuration.enabled_loggers}("${message}", "${old_class_prefix}", "${origin_class_prefix}", "${sanitized_args}"),
        comment   => "Call the ${method} bundle with arguments ${old_class_prefix}, ${origin_class_prefix}, ${sanitized_args}";
}
