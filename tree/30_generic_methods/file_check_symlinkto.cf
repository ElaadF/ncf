#####################################################################################
# Copyright 2013 Normation SAS
# Copyright 2016 Janos Mattyasovszky
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name         File check is symlink to
# @description  Checks if first file is symlink to second file
# @documentation This bundle will define a condition `file_check_symlinkto_${target}_{ok, reached, kept}` if the file `${symlink}`
# is a symbolic link to `${target}`, or `file_check_symlinkto_${target}_{not_ok, reached, not_kept, failed}` if
# if it is not a symbolic link, or any of the files does not exist. The symlink's path is resolved to the 
# absolute path and checked against the target file's path, which must also be an absolute path.
#
# @parameter symlink Symbolic link (absolute path on the target node)
# @parameter target Target file (absolute path on the target node)
# 
# @class_prefix file_check_symlinkto
# @class_parameter symlink

bundle agent file_check_symlinkto(symlink, target)
{
  vars:
      "old_class_prefix"  string => canonify("file_check_symlinkto_${symlink}");
      "args"               slist => { "${symlink}", "${target}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_check_symlinkto_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");


      "real_path"           string => execresult("/bin/readlink -f \"${symlink}\"", "noshell");

  classes:
      "file_exists"         expression => fileexists("${target}");
      "symlink_to_file"     expression => strcmp("${real_path}", "${target}");
      "is_symlink"          expression => islink("${symlink}");
      "is_ok"               expression => "file_exists.is_symlink.symlink_to_file";

  methods:
    is_ok::
      "symlink_points_to_file"
        usebundle => _classes_success("${old_class_prefix}");
      "symlink_points_to_file"
        usebundle => _classes_success("${class_prefix}");
    !is_ok::
      "symlink_does_not_point_to_file"
        usebundle => _classes_failure("${old_class_prefix}");
      "symlink_does_not_point_to_file"
        usebundle => _classes_failure("${class_prefix}");

    any::
      "report"
        usebundle => _log_v3("Check if ${symlink} points to ${target}", "${symlink}", "${old_class_prefix}", "${class_prefix}", @{args});

}
