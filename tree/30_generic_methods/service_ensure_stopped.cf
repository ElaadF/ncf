#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service ensure stopped
# @description Ensure that a service is stopped using the appropriate method
# @rename service_stopped
# @deprecated Use [service_stopped](#service_stopped) instead.
#
# @parameter service_name Service
# 
# @class_prefix service_ensure_stopped
# @class_parameter service_name

bundle agent service_ensure_stopped(service_name)
{
  vars:

      "canonified_service_name"      string => canonify("${service_name}");

      "old_class_prefix"             string => "service_ensure_stopped_${canonified_service_name}";

      "class_prefix"                 string => "${old_class_prefix}";

      "args"                          slist => { "${service_name}" };

      "full_inner_class_prefix"      string => canonify("service_stopped_{service_name}");
      "inner_class_prefix"           string => string_head("${full_inner_class_prefix}", "1000");



  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                         usebundle => disable_reporting;

    "action"             usebundle => service_stopped("${service_name}");
      "reenable_reporting_${class_prefix}"
                         usebundle => enable_reporting,
                        ifvarclass => "should_report";
    "class copy"         usebundle => _classes_copy("${inner_class_prefix}", "${old_class_prefix}"),
                        ifvarclass => "${inner_class_prefix}_reached";
    "class copy"         usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                        ifvarclass => "${inner_class_prefix}_reached";
    "report"
        usebundle  => _log_v3("Ensure that service ${service_name} is stopped", "${service_name}", "${old_class_prefix}", "${class_prefix}", @{args});

}
