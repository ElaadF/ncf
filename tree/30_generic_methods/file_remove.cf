#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File remove
# @description Remove a file if it exists
#
# @parameter target     File to remove (absolute path on the target node)
#
# @class_prefix file_remove
# @class_parameter target

bundle agent file_remove(target)
{
  vars:
    "old_class_prefix" string => canonify("file_remove_${target}");
    "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
    "class_prefix"      string => canonify(join("_", "promisers"));
    "args"              slist => { "${target}" };

  classes:
      #need to ensure if it's a folder or a file
      "is_folder"  expression => isdir("${target}");

  files:
    !is_folder::
      "${target}"
        delete        => tidy,
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
    !is_folder::
      "success_if_nothing" usebundle => _classes_success("${old_class_prefix}"),
                          ifvarclass => "!${old_class_prefix}_reached";

      "success_if_nothing" usebundle => _classes_success("${class_prefix}"),
                          ifvarclass => "has_promiser_stack.!${class_prefix}_reached";
    is_folder::
      "error"              usebundle => _classes_failure("${old_class_prefix}");

      "report"             usebundle => _log("${target} is a directory, and cannot be removed as a file", "${old_class_prefix}", "${class_prefix}", @{args});

    !is_folder::
      "report"             usebundle => _log("Remove file ${target}", "${old_class_prefix}", "${class_prefix}", @{args});

}
