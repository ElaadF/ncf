#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File remove
# @description Remove a file if it exists
# @rename file_absent
# @deprecated Use [file_absent](#file_absent) instead.
#
# @parameter target     File to remove (absolute path on the target node)
#
# @class_prefix file_remove
# @class_parameter target

bundle agent file_remove(target)
{
  vars:
      "canonified_target"    string => canonify("${target}");

      "old_class_prefix"  string => canonify("file_remove_${target}");
      "args"               slist => { "${target}" };

      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_remove_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("file_absent_${report_param}");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");


  classes:
      "should_report"    expression => "${report_data.should_report}";


  methods:
      "disable_reporting_${class_prefix}"
                           usebundle => disable_reporting;
      "action"             usebundle => file_absent("${target}");
      "reenable_reporting_${class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "class copy"         usebundle => _classes_copy("file_absent_${canonified_target}", "${old_class_prefix}"),
                          ifvarclass => "file_absent_${canonified_target}_reached";
      "new result classes" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";
      "report"             usebundle => _log_v3("Remove file ${target}", "${target}", "${old_class_prefix}", "${class_prefix}", @{args});
}
