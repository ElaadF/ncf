#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File ensure block present
# @rename file_block_present
# @deprecated Use [file_block_present](#file_block_present) instead.
# @description Ensure that a text block is present in a specific location
#
# @parameter file File name to edit (absolute path on the target node)
#Â @parameter block Block(s) to add in the file
#
# @class_prefix file_ensure_block_present
# @class_parameter file

bundle agent file_ensure_block_present(file, block)
{
  vars:
      "old_class_prefix"         string => canonify("file_ensure_block_present_${file}");

      "args"                      slist => { "${file}", "${block}" };
      "report_param"             string => join("_", args);
      "full_class_prefix"        string => canonify("file_ensure_block_present_${report_param}");
      "class_prefix"             string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix"  string => canonify("file_block_present_${report_param}");
      "inner_class_prefix"       string => string_head("${full_inner_class_prefix}", "1000");

      "canonified_file"    string => canonify("${file}");


  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${old_class_prefix}"
                           usebundle => disable_reporting;
      "action"             usebundle => file_block_present("${file}", "${block}");
      "reenable_reporting_${old_class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "class copy"         usebundle => _classes_copy("file_block_present_${canonified_file}", "${old_class_prefix}"),
                          ifvarclass => "file_block_present_${canonified_file}_reached";
      "new result classes" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";
      "report"             usebundle => _log_v3("Insert text block ${block} into ${file}", "${file}", "${old_class_prefix}", "${class_prefix}", @{args});
}
